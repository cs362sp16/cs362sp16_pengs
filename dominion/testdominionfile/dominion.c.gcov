        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include "rngs.h"
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:
     1397:    9:int compare(const void* a, const void* b) {
     1397:   10:  if (*(int*)a > *(int*)b)
      599:   11:    return 1;
      798:   12:  if (*(int*)a < *(int*)b)
      194:   13:    return -1;
      604:   14:  return 0;
        -:   15:}
        -:   16:
    #####:   17:struct gameState* newGame() {
    #####:   18:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:  return g;
        -:   20:}
        -:   21:
    #####:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:		  int k8, int k9, int k10) {
    #####:   24:  int* k = malloc(10 * sizeof(int));
    #####:   25:  k[0] = k1;
    #####:   26:  k[1] = k2;
    #####:   27:  k[2] = k3;
    #####:   28:  k[3] = k4;
    #####:   29:  k[4] = k5;
    #####:   30:  k[5] = k6;
    #####:   31:  k[6] = k7;
    #####:   32:  k[7] = k8;
    #####:   33:  k[8] = k9;
    #####:   34:  k[9] = k10;
    #####:   35:  return k;
        -:   36:}
        -:   37:
        1:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:		   struct gameState *state) {
        -:   40:
        -:   41:  int i;
        -:   42:  int j;
        -:   43:  int it;			
        -:   44:  //set up random number generator
        1:   45:  SelectStream(1);
        1:   46:  PutSeed((long)randomSeed);
        -:   47:  
        -:   48:  //check number of players
        1:   49:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   50:    {
    #####:   51:      return -1;
        -:   52:    }
        -:   53:
        -:   54:  //set number of players
        1:   55:  state->numPlayers = numPlayers;
        -:   56:
        -:   57:  //check selected kingdom cards are different
       11:   58:  for (i = 0; i < 10; i++)
        -:   59:    {
      110:   60:      for (j = 0; j < 10; j++)
        -:   61:        {
      100:   62:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   63:	    {
    #####:   64:	      return -1;
        -:   65:	    }
        -:   66:        }
        -:   67:    }
        -:   68:
        -:   69:
        -:   70:  //initialize supply
        -:   71:  ///////////////////////////////
        -:   72:
        -:   73:  //set number of Curse cards
        1:   74:  if (numPlayers == 2)
        -:   75:    {
    #####:   76:      state->supplyCount[curse] = 10;
        -:   77:    }
        1:   78:  else if (numPlayers == 3)
        -:   79:    {
        1:   80:      state->supplyCount[curse] = 20;
        -:   81:    }
        -:   82:  else
        -:   83:    {
    #####:   84:      state->supplyCount[curse] = 30;
        -:   85:    }
        -:   86:
        -:   87:  //set number of Victory cards
        1:   88:  if (numPlayers == 2)
        -:   89:    {
    #####:   90:      state->supplyCount[estate] = 8;
    #####:   91:      state->supplyCount[duchy] = 8;
    #####:   92:      state->supplyCount[province] = 8;
        -:   93:    }
        -:   94:  else
        -:   95:    {
        1:   96:      state->supplyCount[estate] = 12;
        1:   97:      state->supplyCount[duchy] = 12;
        1:   98:      state->supplyCount[province] = 12;
        -:   99:    }
        -:  100:
        -:  101:  //set number of Treasure cards
        1:  102:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  103:  state->supplyCount[silver] = 40;
        1:  104:  state->supplyCount[gold] = 30;
        -:  105:
        -:  106:  //set number of Kingdom cards
       21:  107:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  108:    {
      165:  109:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  110:	{
      155:  111:	  if (kingdomCards[j] == i)
        -:  112:	    {
        -:  113:	      //check if card is a 'Victory' Kingdom card
       10:  114:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  115:		{
        2:  116:		  if (numPlayers == 2){ 
    #####:  117:		    state->supplyCount[i] = 8; 
        -:  118:		  }
        1:  119:		  else{ state->supplyCount[i] = 12; }
        -:  120:		}
        -:  121:	      else
        -:  122:		{
        9:  123:		  state->supplyCount[i] = 10;
        -:  124:		}
       10:  125:	      break;
        -:  126:	    }
        -:  127:	  else    //card is not in the set choosen for the game
        -:  128:	    {
      145:  129:	      state->supplyCount[i] = -1;
        -:  130:	    }
        -:  131:	}
        -:  132:
        -:  133:    }
        -:  134:
        -:  135:  ////////////////////////
        -:  136:  //supply intilization complete
        -:  137:
        -:  138:  //set player decks
        4:  139:  for (i = 0; i < numPlayers; i++)
        -:  140:    {
        3:  141:      state->deckCount[i] = 0;
       12:  142:      for (j = 0; j < 3; j++)
        -:  143:	{
        9:  144:	  state->deck[i][j] = estate;
        9:  145:	  state->deckCount[i]++;
        -:  146:	}
       24:  147:      for (j = 3; j < 10; j++)
        -:  148:	{
       21:  149:	  state->deck[i][j] = copper;
       21:  150:	  state->deckCount[i]++;		
        -:  151:	}
        -:  152:    }
        -:  153:
        -:  154:  //shuffle player decks
        4:  155:  for (i = 0; i < numPlayers; i++)
        -:  156:    {
        3:  157:      if ( shuffle(i, state) < 0 )
        -:  158:	{
    #####:  159:	  return -1;
        -:  160:	}
        -:  161:    }
        -:  162:
        -:  163:  //draw player hands
        4:  164:  for (i = 0; i < numPlayers; i++)
        -:  165:    {  
        -:  166:      //initialize hand size to zero
        3:  167:      state->handCount[i] = 0;
        3:  168:      state->discardCount[i] = 0;
        -:  169:      //draw 5 cards
        -:  170:      // for (j = 0; j < 5; j++)
        -:  171:      //	{
        -:  172:      //	  drawCard(i, state);
        -:  173:      //	}
        -:  174:    }
        -:  175:  
        -:  176:  //set embargo tokens to 0 for all supply piles
       28:  177:  for (i = 0; i <= treasure_map; i++)
        -:  178:    {
       27:  179:      state->embargoTokens[i] = 0;
        -:  180:    }
        -:  181:
        -:  182:  //initialize first player's turn
        1:  183:  state->outpostPlayed = 0;
        1:  184:  state->phase = 0;
        1:  185:  state->numActions = 1;
        1:  186:  state->numBuys = 1;
        1:  187:  state->playedCardCount = 0;
        1:  188:  state->whoseTurn = 0;
        1:  189:  state->handCount[state->whoseTurn] = 0;
        -:  190:  //int it; move to top
        -:  191:
        -:  192:  //Moved draw cards to here, only drawing at the start of a turn
        6:  193:  for (it = 0; it < 5; it++){
        5:  194:    drawCard(state->whoseTurn, state);
        -:  195:  }
        -:  196:
        1:  197:  updateCoins(state->whoseTurn, state, 0);
        -:  198:
        1:  199:  return 0;
        -:  200:}
        -:  201:
       29:  202:int shuffle(int player, struct gameState *state) {
        -:  203: 
        -:  204:
        -:  205:  int newDeck[MAX_DECK];
       29:  206:  int newDeckPos = 0;
        -:  207:  int card;
        -:  208:  int i;
        -:  209:
       29:  210:  if (state->deckCount[player] < 1)
    #####:  211:    return -1;
       29:  212:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  213:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  214:
      552:  215:  while (state->deckCount[player] > 0) {
      494:  216:    card = floor(Random() * state->deckCount[player]);
      494:  217:    newDeck[newDeckPos] = state->deck[player][card];
      494:  218:    newDeckPos++;
     2725:  219:    for (i = card; i < state->deckCount[player]-1; i++) {
     2231:  220:      state->deck[player][i] = state->deck[player][i+1];
        -:  221:    }
      494:  222:    state->deckCount[player]--;
        -:  223:  }
      523:  224:  for (i = 0; i < newDeckPos; i++) {
      494:  225:    state->deck[player][i] = newDeck[i];
      494:  226:    state->deckCount[player]++;
        -:  227:  }
        -:  228:
       29:  229:  return 0;
        -:  230:}
        -:  231:
      340:  232:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  233:{	
        -:  234:  int card;
      340:  235:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  236:
        -:  237:  //check if it is the right phase
      340:  238:  if (state->phase != 0)
        -:  239:    {
    #####:  240:      return -1;
        -:  241:    }
        -:  242:	
        -:  243:  //check if player has enough actions
      340:  244:  if ( state->numActions < 1 )
        -:  245:    {
       24:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //get card played
      316:  250:  card = handCard(handPos, state);
        -:  251:	
        -:  252:  //check if selected card is an action
      316:  253:  if ( card < adventurer || card > treasure_map )
        -:  254:    {
      306:  255:      return -1;
        -:  256:    }
        -:  257:	
        -:  258:  //play card
       10:  259:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  260:    {
        1:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //reduce number of actions
        9:  265:  state->numActions--;
        -:  266:
        -:  267:  //update coins (Treasure cards may be added with card draws)
        9:  268:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  269:	
        9:  270:  return 0;
        -:  271:}
        -:  272:
       66:  273:int buyCard(int supplyPos, struct gameState *state) {
        -:  274:  int who;
        -:  275:  if (DEBUG){
        -:  276:    printf("Entering buyCard...\n");
        -:  277:  }
        -:  278:
        -:  279:  // I don't know what to do about the phase thing.
        -:  280:
       66:  281:  who = state->whoseTurn;
        -:  282:
       66:  283:  if (state->numBuys < 1){
        -:  284:    if (DEBUG)
        -:  285:      printf("You do not have any buys left\n");
    #####:  286:    return -1;
       66:  287:  } else if (supplyCount(supplyPos, state) <1){
        -:  288:    if (DEBUG)
        -:  289:      printf("There are not any of that type of card left\n");
        2:  290:    return -1;
       64:  291:  } else if (state->coins < getCost(supplyPos)){
        -:  292:    if (DEBUG) 
        -:  293:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  294:    return -1;
        -:  295:  } else {
       64:  296:    state->phase=1;
        -:  297:    //state->supplyCount[supplyPos]--;
       64:  298:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  299:  
       64:  300:    state->coins = (state->coins) - (getCost(supplyPos));
       64:  301:    state->numBuys--;
        -:  302:    if (DEBUG)
        -:  303:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  304:  }
        -:  305:
        -:  306:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  307:  //state->discardCount[who]++;
        -:  308:    
       64:  309:  return 0;
        -:  310:}
        -:  311:
     1009:  312:int numHandCards(struct gameState *state) {
     1009:  313:  return state->handCount[ whoseTurn(state) ];
        -:  314:}
        -:  315:
     2029:  316:int handCard(int handPos, struct gameState *state) {
     2029:  317:  int currentPlayer = whoseTurn(state);
     2029:  318:  return state->hand[currentPlayer][handPos];
        -:  319:}
        -:  320:
      136:  321:int supplyCount(int card, struct gameState *state) {
      136:  322:  return state->supplyCount[card];
        -:  323:}
        -:  324:
        2:  325:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  326:  int i;
        2:  327:  int count = 0;
        -:  328:
       32:  329:  for (i = 0; i < state->deckCount[player]; i++)
        -:  330:    {
       30:  331:      if (state->deck[player][i] == card) count++;
        -:  332:    }
        -:  333:
        2:  334:  for (i = 0; i < state->handCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->hand[player][i] == card) count++;
        -:  337:    }
        -:  338:
       36:  339:  for (i = 0; i < state->discardCount[player]; i++)
        -:  340:    {
       34:  341:      if (state->discard[player][i] == card) count++;
        -:  342:    }
        -:  343:
        2:  344:  return count;
        -:  345:}
        -:  346:
     3139:  347:int whoseTurn(struct gameState *state) {
     3139:  348:  return state->whoseTurn;
        -:  349:}
        -:  350:
       87:  351:int endTurn(struct gameState *state) {
        -:  352:  int k;
        -:  353:  int i;
       87:  354:  int currentPlayer = whoseTurn(state);
        -:  355:  
        -:  356:  //Discard hand
      516:  357:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      429:  358:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      429:  359:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  360:  }
       87:  361:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  362:    
        -:  363:  //Code for determining the player
       87:  364:  if (currentPlayer < (state->numPlayers - 1)){ 
       58:  365:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  366:  }
        -:  367:  else{
       29:  368:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  369:  }
        -:  370:
       87:  371:  state->outpostPlayed = 0;
       87:  372:  state->phase = 0;
       87:  373:  state->numActions = 1;
       87:  374:  state->coins = 0;
       87:  375:  state->numBuys = 1;
       87:  376:  state->playedCardCount = 0;
       87:  377:  state->handCount[state->whoseTurn] = 0;
        -:  378:
        -:  379:  //int k; move to top
        -:  380:  //Next player draws hand
      522:  381:  for (k = 0; k < 5; k++){
      435:  382:    drawCard(state->whoseTurn, state);//Draw a card
        -:  383:  }
        -:  384:
        -:  385:  //Update money
       87:  386:  updateCoins(state->whoseTurn, state , 0);
        -:  387:
       87:  388:  return 0;
        -:  389:}
        -:  390:
       30:  391:int isGameOver(struct gameState *state) {
        -:  392:  int i;
        -:  393:  int j;
        -:  394:	
        -:  395:  //if stack of Province cards is empty, the game ends
       30:  396:  if (state->supplyCount[province] == 0)
        -:  397:    {
        1:  398:      return 1;
        -:  399:    }
        -:  400:
        -:  401:  //if three supply pile are at 0, the game ends
       29:  402:  j = 0;
      754:  403:  for (i = 0; i < 25; i++)
        -:  404:    {
      725:  405:      if (state->supplyCount[i] == 0)
        -:  406:	{
        4:  407:	  j++;
        -:  408:	}
        -:  409:    }
       29:  410:  if ( j >= 3)
        -:  411:    {
    #####:  412:      return 1;
        -:  413:    }
        -:  414:
       29:  415:  return 0;
        -:  416:}
        -:  417:
        6:  418:int scoreFor (int player, struct gameState *state) {
        -:  419:
        -:  420:  int i;
        6:  421:  int score = 0;
        -:  422:  //score from hand
       16:  423:  for (i = 0; i < state->handCount[player]; i++)
        -:  424:    {
       10:  425:      if (state->hand[player][i] == curse) { score = score - 1; };
       10:  426:      if (state->hand[player][i] == estate) { score = score + 1; };
       10:  427:      if (state->hand[player][i] == duchy) { score = score + 3; };
       10:  428:      if (state->hand[player][i] == province) { score = score + 6; };
       10:  429:      if (state->hand[player][i] == great_hall) { score = score + 1; };
       10:  430:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  431:    }
        -:  432:
        -:  433:  //score from discard
       72:  434:  for (i = 0; i < state->discardCount[player]; i++)
        -:  435:    {
       66:  436:      if (state->discard[player][i] == curse) { score = score - 1; };
       66:  437:      if (state->discard[player][i] == estate) { score = score + 1; };
       66:  438:      if (state->discard[player][i] == duchy) { score = score + 3; };
       66:  439:      if (state->discard[player][i] == province) { score = score + 6; };
       66:  440:      if (state->discard[player][i] == great_hall) { score = score + 1; };
       66:  441:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  442:    }
        -:  443:
        -:  444:  //score from deck
       72:  445:  for (i = 0; i < state->discardCount[player]; i++)
        -:  446:    {
       66:  447:      if (state->deck[player][i] == curse) { score = score - 1; };
       66:  448:      if (state->deck[player][i] == estate) { score = score + 1; };
       66:  449:      if (state->deck[player][i] == duchy) { score = score + 3; };
       66:  450:      if (state->deck[player][i] == province) { score = score + 6; };
       66:  451:      if (state->deck[player][i] == great_hall) { score = score + 1; };
       66:  452:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  453:    }
        -:  454:
        6:  455:  return score;
        -:  456:}
        -:  457:
        1:  458:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  459:  int i;	
        -:  460:  int j;
        -:  461:  int highScore;
        -:  462:  int currentPlayer;
        -:  463:
        -:  464:  //get score for each player
        5:  465:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  466:    {
        -:  467:      //set unused player scores to -9999
        4:  468:      if (i >= state->numPlayers)
        -:  469:	{
        1:  470:	  players[i] = -9999;
        -:  471:	}
        -:  472:      else
        -:  473:	{
        3:  474:	  players[i] = scoreFor (i, state);
        -:  475:	}
        -:  476:    }
        -:  477:
        -:  478:  //find highest score
        1:  479:  j = 0;
        5:  480:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  481:    {
        4:  482:      if (players[i] > players[j])
        -:  483:	{
        1:  484:	  j = i;
        -:  485:	}
        -:  486:    }
        1:  487:  highScore = players[j];
        -:  488:
        -:  489:  //add 1 to players who had less turns
        1:  490:  currentPlayer = whoseTurn(state);
        5:  491:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  492:    {
        4:  493:      if ( players[i] == highScore && i > currentPlayer )
        -:  494:	{
        1:  495:	  players[i]++;
        -:  496:	}
        -:  497:    }
        -:  498:
        -:  499:  //find new highest score
        1:  500:  j = 0;
        5:  501:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  502:    {
        4:  503:      if ( players[i] > players[j] )
        -:  504:	{
        1:  505:	  j = i;
        -:  506:	}
        -:  507:    }
        1:  508:  highScore = players[j];
        -:  509:
        -:  510:  //set winners in array to 1 and rest to 0
        5:  511:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  512:    {
        4:  513:      if ( players[i] == highScore )
        -:  514:	{
        1:  515:	  players[i] = 1;
        -:  516:	}
        -:  517:      else
        -:  518:	{
        3:  519:	  players[i] = 0;
        -:  520:	}
        -:  521:    }
        -:  522:
        1:  523:  return 0;
        -:  524:}
        -:  525:
      442:  526:int drawCard(int player, struct gameState *state)
        -:  527:{	int count;
        -:  528:  int deckCounter;
      442:  529:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  530:    
        -:  531:    //Step 1 Shuffle the discard pile back into a deck
        -:  532:    int i;
        -:  533:    //Move discard to deck
      490:  534:    for (i = 0; i < state->discardCount[player];i++){
      464:  535:      state->deck[player][i] = state->discard[player][i];
      464:  536:      state->discard[player][i] = -1;
        -:  537:    }
        -:  538:
       26:  539:    state->deckCount[player] = state->discardCount[player];
       26:  540:    state->discardCount[player] = 0;//Reset discard
        -:  541:
        -:  542:    //Shufffle the deck
       26:  543:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  544:   
        -:  545:    if (DEBUG){//Debug statements
        -:  546:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  547:    }
        -:  548:    
       26:  549:    state->discardCount[player] = 0;
        -:  550:
        -:  551:    //Step 2 Draw Card
       26:  552:    count = state->handCount[player];//Get current player's hand count
        -:  553:    
        -:  554:    if (DEBUG){//Debug statements
        -:  555:      printf("Current hand count: %d\n", count);
        -:  556:    }
        -:  557:    
       26:  558:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  559:
       26:  560:    if (deckCounter == 0)
    #####:  561:      return -1;
        -:  562:
       26:  563:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       26:  564:    state->deckCount[player]--;
       26:  565:    state->handCount[player]++;//Increment hand count
        -:  566:  }
        -:  567:
        -:  568:  else{
      416:  569:    int count = state->handCount[player];//Get current hand count for player
        -:  570:    int deckCounter;
        -:  571:    if (DEBUG){//Debug statements
        -:  572:      printf("Current hand count: %d\n", count);
        -:  573:    }
        -:  574:
      416:  575:    deckCounter = state->deckCount[player];//Create holder for the deck count
      416:  576:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      416:  577:    state->deckCount[player]--;
      416:  578:    state->handCount[player]++;//Increment hand count
        -:  579:  }
        -:  580:
      442:  581:  return 0;
        -:  582:}
        -:  583:
      130:  584:int getCost(int cardNumber)
        -:  585:{
      130:  586:  switch( cardNumber ) 
        -:  587:    {
        -:  588:    case curse:
    #####:  589:      return 0;
        -:  590:    case estate:
        1:  591:      return 2;
        -:  592:    case duchy:
    #####:  593:      return 5;
        -:  594:    case province:
       24:  595:      return 8;
        -:  596:    case copper:
        5:  597:      return 0;
        -:  598:    case silver:
       80:  599:      return 3;
        -:  600:    case gold:
    #####:  601:      return 6;
        -:  602:    case adventurer:
    #####:  603:      return 6;
        -:  604:    case council_room:
    #####:  605:      return 5;
        -:  606:    case feast:
    #####:  607:      return 4;
        -:  608:    case gardens:
        2:  609:      return 4;
        -:  610:    case mine:
    #####:  611:      return 5;
        -:  612:    case remodel:
        2:  613:      return 4;
        -:  614:    case smithy:
    #####:  615:      return 4;
        -:  616:    case village:
    #####:  617:      return 3;
        -:  618:    case baron:
        2:  619:      return 4;
        -:  620:    case great_hall:
    #####:  621:      return 3;
        -:  622:    case minion:
        2:  623:      return 5;
        -:  624:    case steward:
    #####:  625:      return 3;
        -:  626:    case tribute:
        2:  627:      return 5;
        -:  628:    case ambassador:
        2:  629:      return 3;
        -:  630:    case cutpurse:
        2:  631:      return 4;
        -:  632:    case embargo: 
        2:  633:      return 2;
        -:  634:    case outpost:
        2:  635:      return 5;
        -:  636:    case salvager:
        2:  637:      return 4;
        -:  638:    case sea_hag:
    #####:  639:      return 4;
        -:  640:    case treasure_map:
    #####:  641:      return 4;
        -:  642:    }
        -:  643:	
    #####:  644:  return -1;
        -:  645:}
        -:  646:
        -:  647://Refactoring five cards from card effect
    #####:  648:int case_adventurer(struct gameState *state){
    #####:  649:	int currentPlayer = whoseTurn(state);
        -:  650:	int temphand[MAX_HAND];// moved above the if statement
    #####:  651:	int drawntreasure=0;
        -:  652:  	int cardDrawn;
    #####:  653:  	int z = 0;// this is the counter for the temp hand
        -:  654:
    #####:  655:  	while(drawntreasure<2){
    #####:  656:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  657:	  		shuffle(currentPlayer, state);
        -:  658:		}
        -:  659:		
    #####:  660:		drawCard(currentPlayer, state);
        -:  661:	
    #####:  662:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  663:	
    #####:  664:		if ((cardDrawn == copper) || (cardDrawn == silver) || (cardDrawn == gold))
    #####:  665:	  		drawntreasure++;
        -:  666:		
        -:  667:		else{
    #####:  668:	  		temphand[z]=cardDrawn;
    #####:  669:	  		state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  670:	  		z++;
        -:  671:		}
        -:  672:	}
        -:  673:    
    #####:  674:    while(z-1>=1){
    #####:  675:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  676:		z=z-1;
        -:  677:    }
        -:  678:	
    #####:  679:	return 0;
        -:  680:}
        -:  681:
        1:  682:int case_remodel(struct gameState *state, int choice1, int choice2, int handPos){
        1:  683:	int currentPlayer = whoseTurn(state);
        1:  684:	int j = state->hand[currentPlayer][choice1];  //store card we will trash
        1:  685:	int i = 0;
        -:  686:
        1:  687:    if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  688:	{
    #####:  689:	  return -1;
        -:  690:	}
        -:  691:
        1:  692:    gainCard(choice2, state, 0, currentPlayer);
        -:  693:
        -:  694:    //discard card from hand
        1:  695:    discardCard(handPos, currentPlayer, state, 0);
        -:  696:
        -:  697:    //discard trashed card
        1:  698:    for (i = 1; i < state->handCount[currentPlayer]; i++)
        -:  699:	{
        1:  700:	  if (state->hand[currentPlayer][i] == j)
        -:  701:	    {
        1:  702:	      discardCard(i, currentPlayer, state, 0);			
        1:  703:	      break;
        -:  704:	    }
        -:  705:	}
        1:  706:    return 0;
        -:  707:}
        -:  708:
        1:  709:int case_baron(struct gameState *state, int choice1){
        1:  710:	int currentPlayer = whoseTurn(state);
        1:  711:	state->numBuys++;//Increase buys by 1!
        -:  712:
        1:  713:    if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  714:		int p = 0;//Iterator for hand!
    #####:  715:		int card_not_discarded = 2;//Flag for discard set!
        -:  716:		
    #####:  717:		while(card_not_discarded){
    #####:  718:	  		if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  719:	    		state->coins += 4;//Add 4 coins to the amount of coins
    #####:  720:	   			state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  721:	    		state->discardCount[currentPlayer]++;
    #####:  722:	    		for (;p < state->handCount[currentPlayer]; p++){
    #####:  723:	      			state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  724:	    		}
    #####:  725:	    		state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  726:	    		state->handCount[currentPlayer]--;
    #####:  727:	    		card_not_discarded = 0;//Exit the loop
        -:  728:	  		}
        -:  729:	  		
    #####:  730:	  		else if (p > state->handCount[currentPlayer]){
        -:  731:	    		if(DEBUG) {
        -:  732:	      			printf("No estate cards in your hand, invalid choice\n");
        -:  733:	      			printf("Must gain an estate if there are any\n");
        -:  734:	    		}
    #####:  735:	    		if (supplyCount(estate, state) > 0){
    #####:  736:	      			gainCard(estate, state, 0, currentPlayer);
    #####:  737:	      			state->supplyCount[estate]--;//Decrement estates
    #####:  738:	      			if (supplyCount(estate, state) == 0){
    #####:  739:						isGameOver(state);
        -:  740:	      			}
        -:  741:	    		}
    #####:  742:	    		card_not_discarded = 0;//Exit the loop
        -:  743:	  		}
        -:  744:			    
        -:  745:	  		else{
    #####:  746:	    		p++;//Next card
        -:  747:	  		}
        -:  748:		}
        -:  749:    }
        -:  750:			    
        -:  751:    else{
        1:  752:		if (supplyCount(estate, state) > 0){
        1:  753:	  		gainCard(estate, state, 0, currentPlayer);//Gain an estate
        1:  754:	  		state->supplyCount[estate]--;//Decrement Estates
        1:  755:	  		if (supplyCount(estate, state) == 0){
    #####:  756:	    		isGameOver(state);
        -:  757:	  		}
        -:  758:		}
        -:  759:    }
        -:  760:	        
        1:  761:    return 0;
        -:  762:}
        -:  763:
    #####:  764:int case_great_hall(struct gameState *state, int handPos){
    #####:  765:	int currentPlayer = whoseTurn(state);
        -:  766:	//+1 Card
    #####:  767:    drawCard(currentPlayer, state);
        -:  768:			
        -:  769:    //+1 Actions
    #####:  770:    state->numActions++;
        -:  771:			
        -:  772:    //discard card from hand
    #####:  773:    discardCard(handPos, currentPlayer, state, 0);
    #####:  774:    return 0;
        -:  775:}
        -:  776:
        1:  777:int case_ambassador(struct gameState *state, int choice1, int choice2, int handPos){
        -:  778:    int i;
        1:  779:    int j = 1;		//used to check if player has enough cards to discard 
        1:  780:    int currentPlayer = whoseTurn(state);
        -:  781:
        1:  782:    if (choice2 > 2 || choice2 < 0)
        -:  783:	{
    #####:  784:	  return -1;				
        -:  785:	}
        -:  786:
        1:  787:    if (choice1 == handPos)
        -:  788:	{
    #####:  789:	  return -1;
        -:  790:	}
        -:  791:
        6:  792:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  793:	{
        5:  794:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  795:	  {
        1:  796:	  	j++;
        -:  797:	  }
        -:  798:	}
        -:  799:    
        1:  800:    if (j < choice2)
        -:  801:	{
    #####:  802:	  return -1;				
        -:  803:	}
        -:  804:
        -:  805:    if (DEBUG) 
        -:  806:		printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  807:
        -:  808:    //increase supply count for choosen card by amount being discarded
        1:  809:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  810:			
        -:  811:    //each other player gains a copy of revealed card
        4:  812:    for (i = 0; i < state->numPlayers; i++)
        -:  813:	{
        3:  814:		if (i != currentPlayer)
        -:  815:	    {
        2:  816:	    	gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  817:	    }
        -:  818:	}
        -:  819:
        -:  820:    //discard played card from hand
        1:  821:    discardCard(handPos, currentPlayer, state, 0);			
        -:  822:
        -:  823:    //trash copies of cards returned to supply
        1:  824:    for (j = 0; j < choice2; j++)
        -:  825:	{
    #####:  826:		for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  827:	    {
    #####:  828:	    	if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  829:			{
    #####:  830:		  		discardCard(i, currentPlayer, state, 1);
    #####:  831:		  		break;
        -:  832:			}
        -:  833:	    }
        -:  834:	}			
        -:  835:
        1:  836:    return 0;
        -:  837:}
        -:  838:
       10:  839:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  840:{
        -:  841:  int i;
        -:  842:  int j;
        -:  843:  int k;
        -:  844:  int x;
        -:  845:  int index;
       10:  846:  int currentPlayer = whoseTurn(state);
       10:  847:  int nextPlayer = currentPlayer + 1;
        -:  848:
       10:  849:  int tributeRevealedCards[2] = {-1, -1};
        -:  850:  int temphand[MAX_HAND];// moved above the if statement
       10:  851:  int drawntreasure=0;
        -:  852:  int cardDrawn;
       10:  853:  int z = 0;// this is the counter for the temp hand
       10:  854:  if (nextPlayer > (state->numPlayers - 1)){
        4:  855:    nextPlayer = 0;
        -:  856:  }
        -:  857:  
        -:  858:	
        -:  859:  //uses switch to select card and perform actions
       10:  860:  switch( card ) 
        -:  861:    {
        -:  862:    case adventurer:
    #####:  863:    	return case_adventurer(state);
        -:  864:			
        -:  865:    case council_room:
        -:  866:      //+4 Cards
    #####:  867:      for (i = 0; i < 4; i++)
        -:  868:	{
    #####:  869:	  drawCard(currentPlayer, state);
        -:  870:	}
        -:  871:			
        -:  872:      //+1 Buy
    #####:  873:      state->numBuys++;
        -:  874:			
        -:  875:      //Each other player draws a card
    #####:  876:      for (i = 0; i < state->numPlayers; i++)
        -:  877:	{
    #####:  878:	  if ( i != currentPlayer )
        -:  879:	    {
    #####:  880:	      drawCard(i, state);
        -:  881:	    }
        -:  882:	}
        -:  883:			
        -:  884:      //put played card in played card pile
    #####:  885:      discardCard(handPos, currentPlayer, state, 0);
        -:  886:			
    #####:  887:      return 0;
        -:  888:			
        -:  889:    case feast:
        -:  890:      //gain card with cost up to 5
        -:  891:      //Backup hand
    #####:  892:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  893:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  894:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  895:      }
        -:  896:      //Backup hand
        -:  897:
        -:  898:      //Update Coins for Buy
    #####:  899:      updateCoins(currentPlayer, state, 5);
    #####:  900:      x = 1;//Condition to loop on
    #####:  901:      while( x == 1) {//Buy one card
    #####:  902:	if (supplyCount(choice1, state) <= 0){
        -:  903:	  if (DEBUG)
        -:  904:	    printf("None of that card left, sorry!\n");
        -:  905:
        -:  906:	  if (DEBUG){
        -:  907:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  908:	  }
        -:  909:	}
    #####:  910:	else if (state->coins < getCost(choice1)){
    #####:  911:	  printf("That card is too expensive!\n");
        -:  912:
        -:  913:	  if (DEBUG){
        -:  914:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  915:	  }
        -:  916:	}
        -:  917:	else{
        -:  918:
        -:  919:	  if (DEBUG){
        -:  920:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  921:	  }
        -:  922:
    #####:  923:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  924:	  x = 0;//No more buying cards
        -:  925:
        -:  926:	  if (DEBUG){
        -:  927:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  928:	  }
        -:  929:
        -:  930:	}
        -:  931:      }     
        -:  932:
        -:  933:      //Reset Hand
    #####:  934:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  935:	state->hand[currentPlayer][i] = temphand[i];
    #####:  936:	temphand[i] = -1;
        -:  937:      }
        -:  938:      //Reset Hand
        -:  939:      			
    #####:  940:      return 0;
        -:  941:			
        -:  942:    case gardens:
        1:  943:      return -1;
        -:  944:			
        -:  945:    case mine:
    #####:  946:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  947:
    #####:  948:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  949:	{
    #####:  950:	  return -1;
        -:  951:	}
        -:  952:		
    #####:  953:      if (choice2 > treasure_map || choice2 < curse)
        -:  954:	{
    #####:  955:	  return -1;
        -:  956:	}
        -:  957:
    #####:  958:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  959:	{
    #####:  960:	  return -1;
        -:  961:	}
        -:  962:
    #####:  963:      gainCard(choice2, state, 2, currentPlayer);
        -:  964:
        -:  965:      //discard card from hand
    #####:  966:      discardCard(handPos, currentPlayer, state, 0);
        -:  967:
        -:  968:      //discard trashed card
    #####:  969:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  970:	{
    #####:  971:	  if (state->hand[currentPlayer][i] == j)
        -:  972:	    {
    #####:  973:	      discardCard(i, currentPlayer, state, 0);			
    #####:  974:	      break;
        -:  975:	    }
        -:  976:	}
        -:  977:			
    #####:  978:      return 0;
        -:  979:			
        -:  980:    case remodel:
        1:  981:    	return case_remodel(state, choice1, choice2, handPos);
        -:  982:
        -:  983:
        -:  984:    case smithy:
        -:  985:      //+3 Cards
    #####:  986:      for (i = 0; i < 3; i++)
        -:  987:	{
    #####:  988:	  drawCard(currentPlayer, state);
        -:  989:	}
        -:  990:			
        -:  991:      //discard card from hand
    #####:  992:      discardCard(handPos, currentPlayer, state, 0);
    #####:  993:      return 0;
        -:  994:		
        -:  995:    case village:
        -:  996:      //+1 Card
    #####:  997:      drawCard(currentPlayer, state);
        -:  998:			
        -:  999:      //+2 Actions
    #####: 1000:      state->numActions = state->numActions + 2;
        -: 1001:			
        -: 1002:      //discard played card from hand
    #####: 1003:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1004:      return 0;
        -: 1005:		
        -: 1006:    case baron:
        1: 1007:    	return case_baron(state, choice1);
        -: 1008:
        -: 1009:    case great_hall:
    #####: 1010:    	return case_great_hall(state, handPos);
        -: 1011:		
        -: 1012:    case minion:
        -: 1013:      //+1 action
        1: 1014:      state->numActions++;
        -: 1015:			
        -: 1016:      //discard card from hand
        1: 1017:      discardCard(handPos, currentPlayer, state, 0);
        -: 1018:			
        1: 1019:      if (choice1)		//+2 coins
        -: 1020:	{
        1: 1021:	  state->coins = state->coins + 2;
        -: 1022:	}
        -: 1023:			
    #####: 1024:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1025:	{
        -: 1026:	  //discard hand
    #####: 1027:	  while(numHandCards(state) > 0)
        -: 1028:	    {
    #####: 1029:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1030:	    }
        -: 1031:				
        -: 1032:	  //draw 4
    #####: 1033:	  for (i = 0; i < 4; i++)
        -: 1034:	    {
    #####: 1035:	      drawCard(currentPlayer, state);
        -: 1036:	    }
        -: 1037:				
        -: 1038:	  //other players discard hand and redraw if hand size > 4
    #####: 1039:	  for (i = 0; i < state->numPlayers; i++)
        -: 1040:	    {
    #####: 1041:	      if (i != currentPlayer)
        -: 1042:		{
    #####: 1043:		  if ( state->handCount[i] > 4 )
        -: 1044:		    {
        -: 1045:		      //discard hand
    #####: 1046:		      while( state->handCount[i] > 0 )
        -: 1047:			{
    #####: 1048:			  discardCard(handPos, i, state, 0);
        -: 1049:			}
        -: 1050:							
        -: 1051:		      //draw 4
    #####: 1052:		      for (j = 0; j < 4; j++)
        -: 1053:			{
    #####: 1054:			  drawCard(i, state);
        -: 1055:			}
        -: 1056:		    }
        -: 1057:		}
        -: 1058:	    }
        -: 1059:				
        -: 1060:	}
        1: 1061:      return 0;
        -: 1062:		
        -: 1063:    case steward:
    #####: 1064:      if (choice1 == 1)
        -: 1065:	{
        -: 1066:	  //+2 cards
    #####: 1067:	  drawCard(currentPlayer, state);
    #####: 1068:	  drawCard(currentPlayer, state);
        -: 1069:	}
    #####: 1070:      else if (choice1 == 2)
        -: 1071:	{
        -: 1072:	  //+2 coins
    #####: 1073:	  state->coins = state->coins + 2;
        -: 1074:	}
        -: 1075:      else
        -: 1076:	{
        -: 1077:	  //trash 2 cards in hand
    #####: 1078:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1079:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1080:	}
        -: 1081:			
        -: 1082:      //discard card from hand
    #####: 1083:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1084:      return 0;
        -: 1085:		
        -: 1086:    case tribute:
        1: 1087:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1088:	if (state->deckCount[nextPlayer] > 0){
    #####: 1089:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1090:	  state->deckCount[nextPlayer]--;
        -: 1091:	}
    #####: 1092:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1093:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1094:	  state->discardCount[nextPlayer]--;
        -: 1095:	}
        -: 1096:	else{
        -: 1097:	  //No Card to Reveal
        -: 1098:	  if (DEBUG){
        -: 1099:	    printf("No cards to reveal\n");
        -: 1100:	  }
        -: 1101:	}
        -: 1102:      }
        -: 1103:	    
        -: 1104:      else{
        1: 1105:	if (state->deckCount[nextPlayer] == 0){
    #####: 1106:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1107:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1108:	    state->deckCount[nextPlayer]++;
    #####: 1109:	    state->discard[nextPlayer][i] = -1;
    #####: 1110:	    state->discardCount[nextPlayer]--;
        -: 1111:	  }
        -: 1112:			    
    #####: 1113:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1114:	} 
        1: 1115:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        1: 1116:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        1: 1117:	state->deckCount[nextPlayer]--;
        1: 1118:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        1: 1119:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        1: 1120:	state->deckCount[nextPlayer]--;
        -: 1121:      }    
        -: 1122:		       
        1: 1123:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1124:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1125:	state->playedCardCount++;
    #####: 1126:	tributeRevealedCards[1] = -1;
        -: 1127:      }
        -: 1128:
        4: 1129:      for (i = 0; i <= 2; i ++){
        3: 1130:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
        1: 1131:	  state->coins += 2;
        -: 1132:	}
        -: 1133:		    
        2: 1134:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
        1: 1135:	  drawCard(currentPlayer, state);
        1: 1136:	  drawCard(currentPlayer, state);
        -: 1137:	}
        -: 1138:	else{//Action Card
        1: 1139:	  state->numActions = state->numActions + 2;
        -: 1140:	}
        -: 1141:      }
        -: 1142:	    
        1: 1143:      return 0;
        -: 1144:		
        -: 1145:    case ambassador:
        1: 1146:    	return case_ambassador(state, choice1, choice2, handPos);
        -: 1147:		
        -: 1148:    case cutpurse:
        -: 1149:
        1: 1150:      updateCoins(currentPlayer, state, 2);
        4: 1151:      for (i = 0; i < state->numPlayers; i++)
        -: 1152:	{
        3: 1153:	  if (i != currentPlayer)
        -: 1154:	    {
        2: 1155:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1156:		{
    #####: 1157:		  if (state->hand[i][j] == copper)
        -: 1158:		    {
    #####: 1159:		      discardCard(j, i, state, 0);
    #####: 1160:		      break;
        -: 1161:		    }
    #####: 1162:		  if (j == state->handCount[i])
        -: 1163:		    {
    #####: 1164:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1165:			{
        -: 1166:			  if (DEBUG)
        -: 1167:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1168:			}	
    #####: 1169:		      break;
        -: 1170:		    }		
        -: 1171:		}
        -: 1172:					
        -: 1173:	    }
        -: 1174:				
        -: 1175:	}				
        -: 1176:
        -: 1177:      //discard played card from hand
        1: 1178:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1179:
        1: 1180:      return 0;
        -: 1181:
        -: 1182:		
        -: 1183:    case embargo: 
        -: 1184:      //+2 Coins
        1: 1185:      state->coins = state->coins + 2;
        -: 1186:			
        -: 1187:      //see if selected pile is in play
        1: 1188:      if ( state->supplyCount[choice1] == -1 )
        -: 1189:	{
    #####: 1190:	  return -1;
        -: 1191:	}
        -: 1192:			
        -: 1193:      //add embargo token to selected supply pile
        1: 1194:      state->embargoTokens[choice1]++;
        -: 1195:			
        -: 1196:      //trash card
        1: 1197:      discardCard(handPos, currentPlayer, state, 1);		
        1: 1198:      return 0;
        -: 1199:		
        -: 1200:    case outpost:
        -: 1201:      //set outpost flag
        1: 1202:      state->outpostPlayed++;
        -: 1203:			
        -: 1204:      //discard card
        1: 1205:      discardCard(handPos, currentPlayer, state, 0);
        1: 1206:      return 0;
        -: 1207:		
        -: 1208:    case salvager:
        -: 1209:      //+1 buy
        1: 1210:      state->numBuys++;
        -: 1211:			
        1: 1212:      if (choice1)
        -: 1213:	{
        -: 1214:	  //gain coins equal to trashed card
    #####: 1215:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1216:	  //trash card
    #####: 1217:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1218:	}
        -: 1219:			
        -: 1220:      //discard card
        1: 1221:      discardCard(handPos, currentPlayer, state, 0);
        1: 1222:      return 0;
        -: 1223:		
        -: 1224:    case sea_hag:
    #####: 1225:      for (i = 0; i < state->numPlayers; i++){
    #####: 1226:	if (i != currentPlayer){
    #####: 1227:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1228:	  state->discardCount[i]++;
    #####: 1229:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1230:	}
        -: 1231:      }
    #####: 1232:      return 0;
        -: 1233:		
        -: 1234:    case treasure_map:
        -: 1235:      //search hand for another treasure_map
    #####: 1236:      index = -1;
    #####: 1237:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1238:	{
    #####: 1239:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1240:	    {
    #####: 1241:	      index = i;
    #####: 1242:	      break;
        -: 1243:	    }
        -: 1244:	}
    #####: 1245:      if (index > -1)
        -: 1246:	{
        -: 1247:	  //trash both treasure cards
    #####: 1248:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1249:	  discardCard(index, currentPlayer, state, 1);
        -: 1250:
        -: 1251:	  //gain 4 Gold cards
    #####: 1252:	  for (i = 0; i < 4; i++)
        -: 1253:	    {
    #####: 1254:	      gainCard(gold, state, 1, currentPlayer);
        -: 1255:	    }
        -: 1256:				
        -: 1257:	  //return success
    #####: 1258:	  return 1;
        -: 1259:	}
        -: 1260:			
        -: 1261:      //no second treasure_map found in hand
    #####: 1262:      return -1;
        -: 1263:    }
        -: 1264:	
    #####: 1265:  return -1;
        -: 1266:}
        -: 1267:
        8: 1268:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1269:{
        -: 1270:	
        -: 1271:  //if card is not trashed, added to Played pile 
        8: 1272:  if (trashFlag < 1)
        -: 1273:    {
        -: 1274:      //add card to played pile
        7: 1275:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        7: 1276:      state->playedCardCount++;
        -: 1277:    }
        -: 1278:	
        -: 1279:  //set played card to -1
        8: 1280:  state->hand[currentPlayer][handPos] = -1;
        -: 1281:	
        -: 1282:  //remove card from player's hand
        8: 1283:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1284:    {
        -: 1285:      //reduce number of cards in hand
        1: 1286:      state->handCount[currentPlayer]--;
        -: 1287:    }
        7: 1288:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1289:    {
        -: 1290:      //reduce number of cards in hand
    #####: 1291:      state->handCount[currentPlayer]--;
        -: 1292:    }
        -: 1293:  else 	
        -: 1294:    {
        -: 1295:      //replace discarded card with last card in hand
        7: 1296:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1297:      //set last card to -1
        7: 1298:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1299:      //reduce number of cards in hand
        7: 1300:      state->handCount[currentPlayer]--;
        -: 1301:    }
        -: 1302:	
        8: 1303:  return 0;
        -: 1304:}
        -: 1305:
       68: 1306:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1307:{
        -: 1308:  //Note: supplyPos is enum of choosen card
        -: 1309:	
        -: 1310:  //check if supply pile is empty (0) or card is not used in game (-1)
       68: 1311:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1312:    {
    #####: 1313:      return -1;
        -: 1314:    }
        -: 1315:	
        -: 1316:  //added card for [whoseTurn] current player:
        -: 1317:  // toFlag = 0 : add to discard
        -: 1318:  // toFlag = 1 : add to deck
        -: 1319:  // toFlag = 2 : add to hand
        -: 1320:
       68: 1321:  if (toFlag == 1)
        -: 1322:    {
    #####: 1323:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1324:      state->deckCount[player]++;
        -: 1325:    }
       68: 1326:  else if (toFlag == 2)
        -: 1327:    {
    #####: 1328:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1329:      state->handCount[player]++;
        -: 1330:    }
        -: 1331:  else
        -: 1332:    {
       68: 1333:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       68: 1334:      state->discardCount[player]++;
        -: 1335:    }
        -: 1336:	
        -: 1337:  //decrease number in supply pile
       68: 1338:  state->supplyCount[supplyPos]--;
        -: 1339:	 
       68: 1340:  return 0;
        -: 1341:}
        -: 1342:
       98: 1343:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1344:{
        -: 1345:  int i;
        -: 1346:	
        -: 1347:  //reset coin count
       98: 1348:  state->coins = 0;
        -: 1349:
        -: 1350:  //add coins for each Treasure card in player's hand
      582: 1351:  for (i = 0; i < state->handCount[player]; i++)
        -: 1352:    {
      484: 1353:      if (state->hand[player][i] == copper)
        -: 1354:	{
      199: 1355:	  state->coins += 1;
        -: 1356:	}
      285: 1357:      else if (state->hand[player][i] == silver)
        -: 1358:	{
      169: 1359:	  state->coins += 2;
        -: 1360:	}
      116: 1361:      else if (state->hand[player][i] == gold)
        -: 1362:	{
    #####: 1363:	  state->coins += 3;
        -: 1364:	}	
        -: 1365:    }	
        -: 1366:
        -: 1367:  //add bonus
       98: 1368:  state->coins += bonus;
        -: 1369:
       98: 1370:  return 0;
        -: 1371:}
        -: 1372:
        -: 1373:
        -: 1374://end of dominion.c
        -: 1375:
